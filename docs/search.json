[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index",
    "section": "",
    "text": "Setting up RStudio for Python & pyMC\n\n\n\n\n\n\n\npyMC\n\n\npython\n\n\nRStudio\n\n\nsetup\n\n\nBayesian statistics\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2025\n\n\nMatthew Hoctor\n\n\n\n\n\n\n  \n\n\n\n\nBradley-Terry models in brms\n\n\n\n\n\n\n\nbrms\n\n\nBayesian statistics\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2025\n\n\nMatthew Hoctor\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Test Post",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/welcome/index.html#a-heading",
    "href": "posts/welcome/index.html#a-heading",
    "title": "Test Post",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/UFC/index.html",
    "href": "posts/UFC/index.html",
    "title": "Bradley-Terry models in brms",
    "section": "",
    "text": "I recently came across an interesting question while working through the problem sets in the Statistical Rethinking course. This problem asks us to estimate the advantage of left-handedness within the UFC based on hand coded UFC data from this paper. The question is motivated by the fact that lefties are over-represented in the UFC (~20% of fighters), as well as other sports like tennis, fencing, etc. The dataset includes info on each UFC fight in the years 2010-2012, including the winner and loser, and the handedness of each fighter\nThe solution set (and the paper) treat the abilities of each fighter as purely unobserved; i.e. the following causal structure is assumed for the data:\n\nCodedagify(\n  W ~ A + L + Q,\n  Q ~ A + L,\n  exposure = \"L\",\n  outcome = \"W\",\n  latent = \"A\",\n  coords = list(\n    x = c(L = 0, W = 1, A = 1,  Q = 0),\n    y = c(L = 0, W = 0, A = 1,  Q = 1))) |&gt;\n  ggdag_status() + \n  theme_dag_gray_grid(\n    panel.grid  = element_blank(),\n    panel.background = element_blank()) +\n  labs(title='', col='Status')\n\n\n\n\nGraph key:\n\nL: left-handedness, the exposure\nA: ability, unobserved\nW: winning a UFC match, the outcome\nQ: qualification for UFC; this is required for winning a UFC match\n\nMany readers will notice that by considering only fighters who have qualified for UFC, Q, we are here conditioning on a collider.\nAlthough the solution set (and the paper) treat the abilities of each fighter as purely unobserved, we are actually given some limited information on fighter abilities: since some of the fighters fight in multiple matches, we can include this information in the model with a Bradley-Terrey model:"
  },
  {
    "objectID": "posts/UFC/index.html#the-ufclefties-question",
    "href": "posts/UFC/index.html#the-ufclefties-question",
    "title": "Bradley-Terry models in brms",
    "section": "",
    "text": "I recently came across an interesting question while working through the problem sets in the Statistical Rethinking course. This problem asks us to estimate the advantage of left-handedness within the UFC based on hand coded UFC data from this paper. The question is motivated by the fact that lefties are over-represented in the UFC (~20% of fighters), as well as other sports like tennis, fencing, etc. The dataset includes info on each UFC fight in the years 2010-2012, including the winner and loser, and the handedness of each fighter\nThe solution set (and the paper) treat the abilities of each fighter as purely unobserved; i.e. the following causal structure is assumed for the data:\n\nCodedagify(\n  W ~ A + L + Q,\n  Q ~ A + L,\n  exposure = \"L\",\n  outcome = \"W\",\n  latent = \"A\",\n  coords = list(\n    x = c(L = 0, W = 1, A = 1,  Q = 0),\n    y = c(L = 0, W = 0, A = 1,  Q = 1))) |&gt;\n  ggdag_status() + \n  theme_dag_gray_grid(\n    panel.grid  = element_blank(),\n    panel.background = element_blank()) +\n  labs(title='', col='Status')\n\n\n\n\nGraph key:\n\nL: left-handedness, the exposure\nA: ability, unobserved\nW: winning a UFC match, the outcome\nQ: qualification for UFC; this is required for winning a UFC match\n\nMany readers will notice that by considering only fighters who have qualified for UFC, Q, we are here conditioning on a collider.\nAlthough the solution set (and the paper) treat the abilities of each fighter as purely unobserved, we are actually given some limited information on fighter abilities: since some of the fighters fight in multiple matches, we can include this information in the model with a Bradley-Terrey model:"
  },
  {
    "objectID": "posts/UFC/index.html#bradley-terry-models",
    "href": "posts/UFC/index.html#bradley-terry-models",
    "title": "Bradley-Terry models in brms",
    "section": "Bradley-Terry models",
    "text": "Bradley-Terry models\nWikipedia defines a Bradley-Terry model as:\n\\[\\Pr(i &gt; j) = \\frac{a_i}{a_i + a_j}\\]\nWhere\n\n\n\\(\\Pr(i &gt; j)\\) is the probability of a pairwise comparison of element i vs element j is true; e.g. in an MMA match between fighter i and fighter j, fighter i wins\n\n\\(a_i = e^{\\beta_i}\\), where \\(\\beta_i\\) is a real value assigned to element i; e.g. the skill of fighter i\n\nWhen transformed to the log-odds scale we get:\n\\[\\operatorname{logit}(\\Pr(i &gt; j)) = \\beta_i - \\beta_j\\]\nIt seems that this class of models describes the UFClefties question. Andy Milne describes how to parameterize this class of models for brms in this stan forum post; essentially we need a \\(\\beta\\) variable for each fighter with a value of 1 if the fighter won the match, a value of-1 if the fighter lost, and a value of 0 otherwise. Adding handedness gives the following model\n\\[\\operatorname{logit}(\\Pr(i &gt; j)) = L + \\beta_i - \\beta_j\\]\nWhere \\(L\\) denotes the ‘lefty advantage’ and encodes the diasteriomeric relation of the match; \\(L\\) takes the following values:\n\n0 when a righty fights a righty or a lefty fights a lefty\n1 when a lefty wins over a righty\n-1 when a righty wins over a lefty\n\nAre we actually going to get much info on fighter ability from going about it this way? Let’s poke a bit at the data to find out."
  },
  {
    "objectID": "posts/UFC/index.html#exploratory",
    "href": "posts/UFC/index.html#exploratory",
    "title": "Bradley-Terry models in brms",
    "section": "Exploratory",
    "text": "Exploratory\nLet’s graph the fights in the dataset with each fighter as a vertex, and each fight as an edge:\n\nCodecoords &lt;- read.csv(\"coords.csv\") |&gt;\n# coords &lt;- read.csv(\"posts/UFC/coords.csv\") |&gt;\n  select(-X) |&gt;\n  as.matrix()\n\n# graph\ng &lt;- UFClefties |&gt;\n  mutate(\n    winner = if_else(fighter1.win == 1, fighter1, fighter2),\n    loser = if_else(fighter1.win == 0, fighter1, fighter2)) |&gt;\n  select(winner, loser) |&gt;\n  graph_from_data_frame(\n    directed = TRUE,\n    vertices = fighters)\n\n# plot\ng |&gt; plot(\n  vertex.size = 5,\n  vertex.label.cex = 0.2,\n  edge.arrow.size = 0.2,\n  layout = coords)\n\n\n\nCode#cleanup\nrm(coords)\n\n\nThat might be a bit difficult to see, depending on your screen width; here’s a tabulation of cluster size (the number of fighters connected to one another by any number of fights):\n\nCodeg.components &lt;- components(g, mode = \"weak\")\nfighters$connected &lt;- g.components$membership\n\n(fighters &lt;- fighters |&gt;\n  group_by(connected) |&gt;\n  mutate(connected_N = n()) |&gt;\n  ungroup()) |&gt;\n  group_by(connected_N) |&gt;\n  summarize(fighters = n()) |&gt;\n  ungroup() |&gt;\n  select(connected_N, fighters) |&gt;\n  mutate(cumulative = cumsum(fighters))\n\n\n\n  \n\n\n\nA good chunk of the fighters are unfortunately connected to only a few, and about a fifth are in clusters of size 2; it does look like there’s some good info in the graph structure though. Let’s graph the largest connected group:\n\nCodeg92 &lt;- UFClefties |&gt;\n  mutate(\n    winner = if_else(fighter1.win == 1, fighter1, fighter2),\n    loser = if_else(fighter1.win == 0, fighter1, fighter2)) |&gt;\n  select(winner, loser) |&gt;\n  graph_from_data_frame(\n    directed = TRUE,\n    vertices = fighters) |&gt;\n  delete_vertices(fighters[fighters$connected_N != 92,]$fighter)\ng92 |&gt; plot(\n  vertex.size = 5,\n  vertex.label.cex = 0.2,\n  edge.arrow.size = 0.2,\n  # margin = -0.25,\n  # asp = 0.5,\n  # canvas.width = 1000,\n  # canvas.height = 500,\n  layout = layout_with_kk(\n    g92, \n    dim = 2,\n    maxiter = 500*vcount(g)))\n\n\n\n\nThere’s plenty more exploration to do, and this is left as an exercise for the reader."
  },
  {
    "objectID": "posts/UFC/index.html#the-model",
    "href": "posts/UFC/index.html#the-model",
    "title": "Bradley-Terry models in brms",
    "section": "The Model",
    "text": "The Model\nDataset\nThe dataset includes 244 fights, and a Bradley-Terry model requires a variable for each fight; so here’s the code I used to MUNGE the data:\n\nCode# MUNGE the data:\nd &lt;- UFClefties |&gt;\n  mutate(\n    Y = 1L,                             # response var; brms likes it this way\n    # diasteriomeric description of the fight; lefty win/lose/0:\n    L = as.integer((fighter1.lefty - fighter2.lefty) * (2*fighter1.win - 1)),\n    fight = row_number(),               # helps pivot_wider keep track of things\n    winner = if_else(fighter1.win ==1, fighter1, fighter2),\n    loser = if_else(fighter1.win ==0, fighter1, fighter2)) |&gt;\n  select(Y, L, fight, winner, loser)    # gets rid of unnecessary vars\n\n# Prepare the Bradley-Terry vars (MUNGE again):\nd &lt;- rbind(\n  d |&gt;\n    mutate(fighter = winner,\n           outcome = 1L) |&gt;\n    select(Y, L, fight, fighter, outcome),\n  d |&gt;\n    mutate(fighter = loser,\n           outcome = -1L) |&gt;\n    select(Y, L, fight, fighter, outcome)) |&gt; \n  pivot_wider(\n    id_cols = c(Y, L, fight),\n    names_from = fighter,\n    names_prefix = \"f\",\n    names_sort = TRUE,\n    values_from = outcome,\n    values_fill = 0L) |&gt;\n  select(-fight)\n\n\nHere’s a peek of a small chunk of the fully-MUNGE-ed dataset:\n\nCodehead(d[56:65,1:10], n = 10)\n\n\n\n  \n\n\n\nbrms Models\nTo start off with, here’s the model from the paper and the solution set:\n\nCodemodel &lt;- brm(\n  formula = bf(Y ~ 0 + L, family = bernoulli),\n  prior = prior(normal(0, 1), class = b),\n  data = d, \n  chains = chains,\n  iter = iter,\n  warmup = warmup,\n  seed = (seed &lt;- as.integer(Sys.time())))\n\n\nThe seed used is 1740372201.\nTo specify the Bradley-Terrey model you might worry that a large formula would be needed; fortunately brms follows the standard Wilkinson formula syntax (e.g. that of the R stats package, nlme, the Bayesian python package bambi, etc), so instead of writing out all of the variables in the formula we can specify the formula with bf(Y ~ 0 + ., family = bernoulli), where . denotes the sum of all variables (other than the response variable, Y); here 0 tells to brms not to automatically add an intercept to the model.\n\nCodeBT_model &lt;- brm(\n  formula = bf(Y ~ 0 + ., family = bernoulli),\n  prior = prior(normal(0, 1), class = b),\n  data = d, \n  chains = chains,\n  iter = iter,\n  warmup = warmup,\n  seed = (seed &lt;- as.integer(Sys.time())))\n\n\nThe seed used for this one is 1740372274. For fun, let’s re-run the model using only the largest cluster:\n\nCoded.92 &lt;- d[UFClefties$fighter1 %in% (as.integer(fighters$connected_N == 92) * 1:244),]\n\nBT92_model &lt;- brm(\n  formula = bf(Y ~ 0 + ., family = bernoulli),\n  prior = prior(normal(0, 1), class = b),\n  data = d.92, \n  chains = chains,\n  iter = iter,\n  warmup = warmup,\n  seed = (seed &lt;- as.integer(Sys.time())))\n\n\nThe seed used is 1740372443.\nTrace and trank plots look fine for these models; they will not be reproduced here."
  },
  {
    "objectID": "posts/UFC/index.html#results",
    "href": "posts/UFC/index.html#results",
    "title": "Bradley-Terry models in brms",
    "section": "Results",
    "text": "Results\nPosterior probabilities\nHere’s a tabulation of the the posterior probabilities with 89% HDI:\n\nCode(draws &lt;- (draws.wide &lt;- cbind(\n  # Prior = rnorm(n = chains*(iter-warmup), mean = 0L, sd = 1L),\n  model |&gt; \n    as_draws_df() |&gt;\n    select(b_L) |&gt;\n    rename(Base_Model = b_L),\n  BT_model |&gt; \n    as_draws_df() |&gt;\n    select(b_L) |&gt;\n    rename(BT_Model = b_L),\n  BT92_model |&gt; \n    as_draws_df() |&gt;\n    select(b_L) |&gt;\n    rename(BT92_Model = b_L))) |&gt;\n  pivot_longer(cols = everything()) |&gt;  # pivots all columns\n  rename(Model = name)) |&gt;\n  group_by(Model) |&gt;\n  mean_hdi(value, .width = .89)\n\n\n\n  \n\n\n\nAnd the posterior predictive plot for the lefty advantage:\n\nCodedraws |&gt;\n  ggplot(aes(x = value, fill = Model)) +\n  stat_function(\n    fun = dnorm, \n    geom = \"area\",\n    color = \"black\", \n    fill = rgb(0.9, 0.5, 0, 0.1),\n    alpha = 0.3) +\n  geom_density(\n    alpha = 0.5,\n    from = -2.1,\n    to = 2.1,\n    n = 2048) +\n  xlab(\"Lefty advantage\") +\n  ylab(\"Probability Density\") +\n  theme(                                            # add x & y lines\n    panel.grid  = element_blank(),\n    panel.background = element_blank(),             # remove gray background\n    axis.line.x = element_line(colour = 'black', linewidth = 0.5, linetype='solid'),\n    axis.line.y = element_line(colour = 'black', linewidth = 0.5, linetype='solid'),\n    legend.position = \"none\") +\n  scale_x_continuous(limits = c(-1.5, 1.5), expand = c(0, 0)) +\n  scale_y_continuous(limits = c(0, 1.7), expand = c(0, 0))\n\n\n\n\nPlot key:\n\nYellow: normal prior\nRed: base model\nGreen: full Bradley-Terrey model (all data points)\nBlue: sub-Bradley-Terrey model (including only the 92 inter-connected fighters)\n\nInterestingly, looking at only the 92 inter-connected fighters deviates furthest from the assumptions baked into the prior."
  },
  {
    "objectID": "posts/UFC/index.html#conclusion",
    "href": "posts/UFC/index.html#conclusion",
    "title": "Bradley-Terry models in brms",
    "section": "Conclusion",
    "text": "Conclusion\nSo in this case adding information on fighter ability didn’t affect the posterior distribution much, and probably didn’t contain much information given the small size of the clusters, and low average number of fights for each fighter, but it was an interesting exercise. Some parting thoughts:\n\nThe exercise illustrated the limited expressive power of brms relative to Stan and the Rethinking package; models will be difficult to express in brms unless they can be coerced into a design matrix, as Wilkinson notation fundamentally is about converting a formula to a design matrix.\nPerhaps the “footedness” of the fighters might provide more info? This would complicate the diasteriomeric relations in each match, as each would then be a relation between four chiral centers, but perhaps the strikes from the lower body are more important than those from the upper body."
  },
  {
    "objectID": "posts/UFC/index.html#version-history",
    "href": "posts/UFC/index.html#version-history",
    "title": "Bradley-Terry models in brms",
    "section": "Version History",
    "text": "Version History\nUpdated 2025-02-14:\n\ninline code\ncleanup dag\ncode folding\nadd lightbox to fight graphs\n\nUpdated 2025-02-10:\n\nimproved graphs\nadded the 92-fighter Bradley-Terrey model\nadded license info\nincreased sample draws\nexpanded conclusions"
  },
  {
    "objectID": "posts/pyMC setup/index.html",
    "href": "posts/pyMC setup/index.html",
    "title": "Setting up RStudio for Python & pyMC",
    "section": "",
    "text": "How does one go from a linux installation with python3 and RStudio to rendering .qmd files with python and pyMC code chunks? In this blog post I document the steps I took to get these things set up."
  },
  {
    "objectID": "posts/pyMC setup/index.html#setting-up-quarto-to-render-python-code-chunks",
    "href": "posts/pyMC setup/index.html#setting-up-quarto-to-render-python-code-chunks",
    "title": "Setting up RStudio for Python & pyMC",
    "section": "Setting up Quarto to render python code chunks",
    "text": "Setting up Quarto to render python code chunks\nFirst, within RStudio select a default python version for RStudio (and un-check ‘Automatically activate project-local Python environments’); and for good measure create a keyboard shortcut to insert python code chunks (I opted to remap Ctrl+Alt+P from ‘Re-Run Previous Code Chunk Execution’).\nRStudio requires the reticulate package to execute python code chunks; it can be installed with install.packages:\n```{r}\ninstall.packages(\"reticulate\")\n```\nIn order to render python code chunks quarto requires the jupyter python package. It can be installed with:\n```{bash}\npython3 -m pip install jupyter\n```\nTo check if quarto thinks it’s set up to render python chunks:\n#| echo: fenced\n\nquarto check jupyter\nDid it actually work?\n\n\nCode\n```{python}\nprint(\"Hello World!\")\n1+1\n```\n\n\nHello World!\n\n\n2\n\n\nApparently so."
  },
  {
    "objectID": "posts/pyMC setup/index.html#install-python-packages",
    "href": "posts/pyMC setup/index.html#install-python-packages",
    "title": "Setting up RStudio for Python & pyMC",
    "section": "Install python packages",
    "text": "Install python packages\nWhich python packages will be needed to actually use pyMC? Here are the ones I installed in advance:\n\nFrom the Bayesian Analysis with Python packages:\n\npymc; optional dependencies listed here:\n\nnose optional, required for pymc.test()\npydot optional, interface to Graphiz; required for graphical representation of pyMC models; graphiz must be installed on the system, e.g. sudo apt install graphviz on Debian or Ubuntu linux\n\narviz model diagnostics, comparison, etc\nbambi Wilkinson formulas for pyMC\nkulprit variable selection within Bambi models\npymc-bart Bayesian Addative Regression Trees\npreliz for choosing priors\nnutpie ‘A fast sampler for Bayesian posteriors’\n\nOther packages:\n\nnumpy numerical analysis\n\nscipy more numerical analysis\n\npandas MUNGE data\nmatplotlib data visualization\n\nseaborn more data vis for statistical models\n\n\n\nIt would make too much sense to install python packages by calling pip from a python chunk, like so:\n```{python}\npip install pymc bambi arviz kulprit pymc-bart preliz nutpie numpy scipy pandas matplotlib seaborn nose pydot\n```\nUnfortunately reticulate doesn’t support this; but note that this chunk will run properly when rendered, as you will recall that quarto renders this with the jupyter python package. Reticulate could be used, e.g. reticulate::py_install(\"pymc\",pip=TRUE), but nothing beats the good old command line:\n```{bash}\npython3 -m pip install pymc bambi arviz kulprit pymc-bart preliz nutpie numpy scipy pandas matplotlib seaborn nose pydot\n```\nThe following outdated packages (python3 pip list --outdated) were updated:\n```{bash}\npython3 -m pip install pymc numpy scipy matplotlib matplotlib-inline -U\n```"
  },
  {
    "objectID": "posts/pyMC setup/index.html#pymc-example",
    "href": "posts/pyMC setup/index.html#pymc-example",
    "title": "Setting up RStudio for Python & pyMC",
    "section": "pyMC example",
    "text": "pyMC example\nFor this example we will recreate model 4.1 from the Statistical Rethinking text, as demonstrated in the pymc resources:\nSetup the python libraries:\n\n\nCode\nimport arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport scipy.stats as stats\n\nfrom scipy.interpolate import griddata\n\n\nReaders who have already read Statistical Rethinking may recall that the Howell1 dataset contains demographic data (height, weight, age, gender) from Kalahari Kung San people. Load the dataset:\n\n\nCode\nd = pd.read_csv(\"Howell1.csv\", sep=\";\", header=0)\nd2 = d[d.age &gt;= 18]\n\n\nA mathematical description of model 4.1 (\\(h_i\\) is the height of participant \\(i\\)):\n\\[\n\\begin{align}\nh_i &\\sim \\operatorname{Normal} (\\mu, \\sigma) \\\\\n\\mu &\\sim \\operatorname{Normal} (178, 20) \\\\\n\\sigma &\\sim \\operatorname{Uniform} (0, 50) \\\\\n\\end{align}\n\\]\nThis model was translated into pyMC as:\n\n\nCode\nwith pm.Model() as m4_1:\n    mu = pm.Normal(\"mu\", mu=178, sigma=20)\n    sigma = pm.Uniform(\"sigma\", lower=0, upper=50)\n    height = pm.Normal(\"height\", mu=mu, sigma=sigma, observed=d2.height.values)\n    \nwith m4_1:\n    trace_4_1 = pm.sample(1000, tune=1000)\n\n\n\n\n\n\n\n\nUsing arviz to summarize the results; first the trace plot:\n\n\nCode\naz.plot_trace(\n  trace_4_1, \n  show=\"FALSE\"           # don't show backend function\n)\n\n\n\n\n\n\n\n\n\narray([[&lt;Axes: title={'center': 'mu'}&gt;, &lt;Axes: title={'center': 'mu'}&gt;],\n       [&lt;Axes: title={'center': 'sigma'}&gt;,\n        &lt;Axes: title={'center': 'sigma'}&gt;]], dtype=object)\n\n\nAnd a data table summarizing the results:\n\n\nCode\naz.summary(trace_4_1, round_to=2, kind=\"stats\")\n\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\nmu\n154.61\n0.42\n153.81\n155.39\n\n\nsigma\n7.76\n0.30\n7.22\n8.33"
  },
  {
    "objectID": "posts/pyMC setup/index.html#useful-resources",
    "href": "posts/pyMC setup/index.html#useful-resources",
    "title": "Setting up RStudio for Python & pyMC",
    "section": "Useful resources",
    "text": "Useful resources\n\nPython in quarto\npyMC resources\n\npymc-resources Statistical Rethinking environment\n\nreticulate cheatsheet"
  }
]