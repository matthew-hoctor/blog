{
  "hash": "3cf313264522253855b56a6f401c54dd",
  "result": {
    "markdown": "---\ntitle: Setting up RStudio for Python & pyMC\nauthor: Matthew Hoctor\ndate: '2025-02-25'\ndate-modified: last-modified\nlicense: CC BY-SA 4.0\ncategories:\n  - pyMC\n  - python\n  - RStudio\n  - setup\n  - Bayesian statistics\ncode-fold: show\nipynb-shell-interactivity: all\ndraft: false\nfreeze: true\n---\n\nHow does one go from a linux installation with python3 and RStudio to rendering .qmd files with python and pyMC code chunks?  In this blog post I document the steps I took to get these things set up.\n\n## Setting up Quarto to render python code chunks\n\nFirst, within RStudio [select a default python version for RStudio](https://docs.posit.co/ide/user/ide/guide/environments/py/python.html#selecting-a-default-version-of-python) (and un-check 'Automatically activate project-local Python environments'); and for good measure [create a keyboard shortcut](https://support.posit.co/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts-in-the-RStudio-IDE) to insert python code chunks (I opted to remap Ctrl+Alt+P from 'Re-Run Previous Code Chunk Execution').\n\nRStudio [requires the `reticulate` package](https://rstudio.github.io/reticulate/articles/rstudio_ide.html) to execute python code chunks; it can be installed with `install.packages`:\n\n```{{r}}\ninstall.packages(\"reticulate\")\n```\n\nIn order to [render python code chunks](https://quarto.org/docs/computations/python.html) quarto requires the `jupyter` python package.  It can be installed with:\n\n```{{bash}}\npython3 -m pip install jupyter\n```\n\nTo check if quarto thinks it's set up to render python chunks:\n\n\n```{bash}\n#| echo: fenced\n\nquarto check jupyter\n```\n\n\nDid it actually work?\n\n::: {.cell execution_count=1}\n```` { .cell-code}\n```{{python}}\nprint(\"Hello World!\")\n1+1\n```\n\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\nApparently so.\n\n## Install python packages\n\nWhich python packages will be needed to actually use pyMC?  Here are the ones I installed in advance:\n\n - From the [Bayesian Analysis with Python](https://github.com/aloctavodia/BAP3?tab=readme-ov-file#environment-installation) packages:\n   - [pymc](https://pypi.org/project/pymc/); [optional dependencies listed here](https://pymcmc.readthedocs.io/en/latest/INSTALL.html#dependencies):\n      - [nose](https://pypi.org/project/nose/) optional, required for `pymc.test()`\n      - [pydot](https://pypi.org/project/pydot/) optional, interface to Graphiz; required for graphical representation of pyMC models; [graphiz](https://graphviz.org/) must be [installed](https://graphviz.org/download/) on the system, e.g. `sudo apt install graphviz\n` on Debian or Ubuntu linux\n   - [arviz](https://pypi.org/project/arviz/) model diagnostics, comparison, etc\n   - [bambi](https://pypi.org/project/bambi/) Wilkinson formulas for pyMC\n   - [kulprit](https://pypi.org/project/kulprit/) variable selection within Bambi models\n   - [pymc-bart](https://pypi.org/project/pymc-bart/) Bayesian Addative Regression Trees\n   - [preliz](https://pypi.org/project/preliz/) for choosing priors\n   - [nutpie](https://pypi.org/project/nutpie/) 'A fast sampler for Bayesian posteriors'\n - Other packages:\n   - [numpy](https://pypi.org/project/numpy/) numerical analysis\n      - [scipy](https://pypi.org/project/scipy/) more numerical analysis\n   - [pandas](https://pypi.org/project/pandas/) MUNGE data\n   - [matplotlib](https://pypi.org/project/matplotlib/) data visualization\n      - [seaborn](https://pypi.org/project/seaborn/) more data vis for statistical models\n\nIt would make too much sense to install python packages by calling pip from a python chunk, like so:\n\n```{{python}}\npip install pymc bambi arviz kulprit pymc-bart preliz nutpie numpy scipy pandas matplotlib seaborn nose pydot\n```\n\nUnfortunately `reticulate` doesn't support this; but note that this chunk will run properly when rendered, as you will recall that quarto renders this with the `jupyter` python package.  Reticulate could be used, e.g. `reticulate::py_install(\"pymc\",pip=TRUE)`, but nothing beats the good old command line:\n\n```{{bash}}\npython3 -m pip install pymc bambi arviz kulprit pymc-bart preliz nutpie numpy scipy pandas matplotlib seaborn nose pydot\n```\n\nThe following outdated packages (`python3 pip list --outdated`) were updated:\n\n```{{bash}}\npython3 -m pip install pymc numpy scipy matplotlib matplotlib-inline -U\n```\n\n## pyMC example\n\nFor this example we will recreate model 4.1 from the [Statistical Rethinking](http://xcelab.net/rm/statistical-rethinking/) text, as demonstrated in the [pymc resources](https://github.com/pymc-devs/pymc-resources/blob/main/Rethinking_2/Chp_04.ipynb):\n\nSetup the python libraries:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport scipy.stats as stats\n\nfrom scipy.interpolate import griddata\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING (pytensor.tensor.blas): Using NumPy C-API based implementation for BLAS functions.\n```\n:::\n:::\n\n\nReaders who have already read Statistical Rethinking may recall that the Howell1 dataset contains demographic data (height, weight, age, gender) from Kalahari Kung San people.  Load the dataset:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nd = pd.read_csv(\"Howell1.csv\", sep=\";\", header=0)\nd2 = d[d.age >= 18]\n```\n:::\n\n\nA mathematical description of model 4.1 ($h_i$ is the height of participant $i$):\n\n$$\n\\begin{align}\nh_i &\\sim \\operatorname{Normal} (\\mu, \\sigma) \\\\\n\\mu &\\sim \\operatorname{Normal} (178, 20) \\\\\n\\sigma &\\sim \\operatorname{Uniform} (0, 50) \\\\\n\\end{align}\n$$\n\nThis model was translated into pyMC as:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nwith pm.Model() as m4_1:\n    mu = pm.Normal(\"mu\", mu=178, sigma=20)\n    sigma = pm.Uniform(\"sigma\", lower=0, upper=50)\n    height = pm.Normal(\"height\", mu=mu, sigma=sigma, observed=d2.height.values)\n    \nwith m4_1:\n    trace_4_1 = pm.sample(1000, tune=1000)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"11e6e66cb54844839f10dfecfa1217b4\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n:::\n\n\nUsing arviz to summarize the results; first the trace plot:\n\n::: {.cell .column-screen execution_count=5}\n``` {.python .cell-code}\naz.plot_trace(\n  trace_4_1, \n  show=\"FALSE\"           # don't show backend function\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=920 height=357 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[<Axes: title={'center': 'mu'}>, <Axes: title={'center': 'mu'}>],\n       [<Axes: title={'center': 'sigma'}>,\n        <Axes: title={'center': 'sigma'}>]], dtype=object)\n```\n:::\n:::\n\n\nAnd a data table summarizing the results:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\naz.summary(trace_4_1, round_to=2, kind=\"stats\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n      <th>sd</th>\n      <th>hdi_3%</th>\n      <th>hdi_97%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mu</th>\n      <td>154.61</td>\n      <td>0.42</td>\n      <td>153.83</td>\n      <td>155.38</td>\n    </tr>\n    <tr>\n      <th>sigma</th>\n      <td>7.77</td>\n      <td>0.29</td>\n      <td>7.23</td>\n      <td>8.32</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Useful resources\n\n - [Python in quarto](https://quarto.org/docs/computations/python.html)\n - [pyMC resources](https://github.com/pymc-devs/pymc-resources/tree/main)\n   - [pymc-resources Statistical Rethinking environment](https://github.com/pymc-devs/pymc-resources/blob/main/Rethinking_2/environment_v4.yml)\n - [reticulate cheatsheet](https://rstudio.github.io/cheatsheets/html/reticulate.html)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"003b9b4351044ea98b6afe779a74b9ca\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"11e6e66cb54844839f10dfecfa1217b4\":{\"model_module\":\"@jupyter-widgets/output\",\"model_module_version\":\"1.0.0\",\"model_name\":\"OutputModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/output\",\"_model_module_version\":\"1.0.0\",\"_model_name\":\"OutputModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/output\",\"_view_module_version\":\"1.0.0\",\"_view_name\":\"OutputView\",\"layout\":\"IPY_MODEL_003b9b4351044ea98b6afe779a74b9ca\",\"msg_id\":\"\",\"outputs\":[{\"data\":{\"text/html\":\"<pre style=\\\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\\\">                                                                                                                   \\n <span style=\\\"font-weight: bold\\\"> Progress                 </span> <span style=\\\"font-weight: bold\\\"> Draws </span> <span style=\\\"font-weight: bold\\\"> Divergences </span> <span style=\\\"font-weight: bold\\\"> Step size </span> <span style=\\\"font-weight: bold\\\"> Grad evals </span> <span style=\\\"font-weight: bold\\\"> Sampling Speed  </span> <span style=\\\"font-weight: bold\\\"> Elapsed </span> <span style=\\\"font-weight: bold\\\"> Remaining </span> \\n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.43        3            1394.57 draws/s   0:00:01   0:00:00    \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.34        3            1407.90 draws/s   0:00:01   0:00:00    \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.33        3            1267.02 draws/s   0:00:01   0:00:00    \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.06        3            1119.15 draws/s   0:00:01   0:00:00    \\n                                                                                                                   \\n</pre>\\n\",\"text/plain\":\"                                                                                                                   \\n \\u001b[1m \\u001b[0m\\u001b[1mProgress                \\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mDraws\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mDivergences\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mStep size\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mGrad evals\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mSampling Speed \\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mElapsed\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mRemaining\\u001b[0m\\u001b[1m \\u001b[0m \\n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   2000    0             1.43        3            1394.57 draws/s   0:00:01   0:00:00    \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   2000    0             1.34        3            1407.90 draws/s   0:00:01   0:00:00    \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   2000    0             1.33        3            1267.02 draws/s   0:00:01   0:00:00    \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   2000    0             1.06        3            1119.15 draws/s   0:00:01   0:00:00    \\n                                                                                                                   \\n\"},\"metadata\":{},\"output_type\":\"display_data\"}],\"tabbable\":null,\"tooltip\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}